/*
  {{properCase name}}
*/

import React, { Component } from 'react';
import autoBind from 'react-autobind';
import classnames from 'classnames';
import { injectIntl } from 'react-intl';
import { connect } from 'react-redux';
import { reduxForm, Field } from 'redux-form';
import { Helmet } from 'react-helmet';
import { withApollo } from 'react-apollo';
import gql from 'graphql-tag';

import Alert from 'ui/common/alert';
import routeTemplates from 'ui/common/routes/templates';
{{#if wantReduxForm}}
import TextField from 'ui/common/form/fields/text-field';
import validator from 'ui/common/form/validator';
import SubmitButton from 'ui/common/form/submit-button';
import LogoField from 'ui/admin/badges/logo-field';
import fields, { fieldNames } from './model';
{{/if}}
import messages from './messages';
import * as actionTypes from 'store/graphql/{{properCase name}}/action-types';
import { selectError } from 'store/graphql/{{properCase name}}/selectors';
{{#if wantReduxForm}}
const validate = validator(fields);
{{/if}}
class {{properCase name}} extends Component {
  constructor(props) {
    super(props);
    autoBind(this);
  }

  async onSubmit(values) {
    const { client, createBadgeStart, createBadgeSuccess, createBadgeError } = this.props;
    createBadgeStart();

    try {
      const resultFromGraphQl = await client.mutate({
        mutation: gql`
          mutation createNewBadge(
            $id: String!
            $name: String!
            $description: String!
            $logo_data: String!
            $extensions_cta_text: String!
            $extensions_cta_link: String!
          ) {
            createBadge(
              id: $id
              name: $name
              description: $description
              logo_data: $logo_data
              extensions_cta_text: $extensions_cta_text
              extensions_cta_link: $extensions_cta_link
            ) {
              id
              name
              type
              description
              logo_data
            }
          }
        `,
        variables: {
          id: 'hehehe',
          name: values.badgeName,
          description: values.description,
          logo_data: values.logo,
          extensions_cta_link: values.ctaLink,
          extensions_cta_text: values.ctaText,
        },
      });

      if (resultFromGraphQl.error) {
        createBadgeError(resultFromGraphQl.error);
      } else {
        const { createBadge } = resultFromGraphQl.data;
        createBadgeSuccess();
        this.props.history.push(routeTemplates.admin.badges.root);
      }
    } catch (error) {
      createBadgeError('Random error');
    }
  }

  render() {
    const { handleSubmit, submitting, errorMessage, intl: { formatMessage } } = this.props;

    return (
      <div className={classnames('container py-4')}>
        <Helmet>
          <title>{formatMessage(messages.fieldOne)}</title>
        </Helmet>
        <div className={classnames('row justify-content-center align-items-center')}>
          <div className="col-12 col-sm-6">
            <h1 className="text-primary text-center">{formatMessage(messages.fieldOne)}</h1>
            {{#if wantReduxForm}}
            <form onSubmit={handleSubmit(this.onSubmit)}>
              {errorMessage && (
                <Alert color="danger" inverse>
                  {errorMessage}
                </Alert>
              )}
              <div>
                <Field
                  name={fieldNames.inputOne}
                  component={TextField}
                  label={formatMessage(messages[fieldNames.inputOne])}
                />
              </div>

              <div className="mt-3">
                <SubmitButton
                  label={formatMessage(messages.submitButton)}
                  fullWidth
                  submitting={submitting}
                />
              </div>
            </form>
            {{/if}}
          </div>
        </div>
      </div>
    );
  }
}

function mapStateToProps(state, props) {
  return {
    {{#if wantReduxForm}}
    initialValues: {
      [fieldNames.inputOne]: 'Get this badge',
    },
    {{/if}}
    errorMessage: selectError(state),
  };
}

function mapDispatchToProps(dispatch) {
  return {
    createBadgeStart: () => dispatch({ type: actionTypes.CREATE_BADGE_START }),
    createBadgeSuccess: () => dispatch({ type: actionTypes.CREATE_BADGE_SUCCESS }),
    createBadgeError: error =>
      dispatch({ type: actionTypes.CREATE_BADGE_ERROR, payload: { error } }),
  };
}

{{#if wantReduxForm}}
export default connect(mapStateToProps, mapDispatchToProps)(
  reduxForm({
    form: '{{dashCase name}}',
    validate,
  })(injectIntl(withApollo({{properCase name}})))
);
{{else}}
export default connect(mapStateToProps, mapDispatchToProps)(injectIntl(withApollo({{properCase name}})));
{{/if}}
